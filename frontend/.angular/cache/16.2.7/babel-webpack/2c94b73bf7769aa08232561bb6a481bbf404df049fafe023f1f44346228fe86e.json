{"ast":null,"code":"import { MatDialogConfig } from '@angular/material/dialog';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { saveAs } from 'file-saver';\nimport { GlobalConstants } from 'src/app/shared/global-constants';\nimport { ConfirmationComponent } from '../dialog/confirmation/confirmation.component';\nimport { ViewBillProductsComponent } from '../dialog/view-bill-products/view-bill-products.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/bill-user.service\";\nimport * as i2 from \"ngx-ui-loader\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"src/app/services/snackbar.service\";\nimport * as i5 from \"@angular/router\";\nexport let ViewBillUserComponent = /*#__PURE__*/(() => {\n  class ViewBillUserComponent {\n    constructor(billService, ngxService, dialog, snackBar, router) {\n      this.billService = billService;\n      this.ngxService = ngxService;\n      this.dialog = dialog;\n      this.snackBar = snackBar;\n      this.router = router;\n      this.displayedColumns = ['name', 'email', 'contactNumber', 'paymentMethod', 'total', 'view'];\n    }\n    ngOnInit() {\n      this.ngxService.start();\n      this.tableData();\n    }\n    tableData() {\n      this.billService.getBills().subscribe(resp => {\n        this.ngxService.stop();\n        this.dataSource = new MatTableDataSource(resp.data);\n      }, error => {\n        this.ngxService.stop();\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n        this.snackBar.openSnackBar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n    applyFilter(event) {\n      const filterValue = event.target.value;\n      this.dataSource.filter = filterValue.trim().toLowerCase();\n    }\n    handleViewAction(value) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.data = {\n        data: value\n      };\n      dialogConfig.width = '100%';\n      const dialogRef = this.dialog.open(ViewBillProductsComponent, dialogConfig);\n      this.router.events.subscribe(() => {\n        dialogRef.close();\n      });\n    }\n    downloadReportAction(value) {\n      this.ngxService.start();\n      let data = {\n        name: value.name,\n        email: value.email,\n        uuid: value.uuid,\n        contactNumber: value.contactNumber,\n        paymentMethod: value.paymentMethod,\n        totalAmount: value.total,\n        productDetails: value.productDetails\n      };\n      this.billService.getPDF(data).subscribe(resp => {\n        saveAs(resp, value.uuid + '.pdf');\n        this.ngxService.stop();\n      });\n    }\n    handleDeleteAction(value) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.data = {\n        message: 'delete ' + value.name + ' bill'\n      };\n      const dialogRef = this.dialog.open(ConfirmationComponent, dialogConfig);\n      const sub = dialogRef.componentInstance.onEmitStatusChange.subscribe(response => {\n        this.ngxService.start();\n        this.deleteProduct(value.id);\n        dialogRef.close();\n      });\n    }\n    deleteProduct(id) {\n      this.billService.delete(id).subscribe(resp => {\n        this.ngxService.stop();\n        this.tableData();\n        this.responseMessage = resp?.message;\n        this.snackBar.openSnackBar(this.responseMessage, 'success');\n      }, error => {\n        this.ngxService.stop();\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n        this.snackBar.openSnackBar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n    static #_ = this.ɵfac = function ViewBillUserComponent_Factory(t) {\n      return new (t || ViewBillUserComponent)(i0.ɵɵdirectiveInject(i1.BillUserService), i0.ɵɵdirectiveInject(i2.NgxUiLoaderService), i0.ɵɵdirectiveInject(i3.MatDialog), i0.ɵɵdirectiveInject(i4.SnackbarService), i0.ɵɵdirectiveInject(i5.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ViewBillUserComponent,\n      selectors: [[\"app-view-bill-user\"]],\n      decls: 2,\n      vars: 0,\n      template: function ViewBillUserComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"view-bill-user works!\");\n          i0.ɵɵelementEnd();\n        }\n      }\n    });\n  }\n  return ViewBillUserComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}