{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { GlobalConstants } from 'src/app/shared/global-constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/product.service\";\nimport * as i3 from \"src/app/services/category.service\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"src/app/services/snackbar.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/toolbar\";\nimport * as i11 from \"@angular/flex-layout/flex\";\nfunction ProductComponent_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" \\u098F\\u0987 \\u0995\\u09CD\\u09B7\\u09C7\\u09A4\\u09CD\\u09B0\\u099F\\u09BF \\u09B8\\u09A0\\u09BF\\u0995 \\u09A8\\u09DF \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let ProductComponent = /*#__PURE__*/(() => {\n  class ProductComponent {\n    constructor(dialogData, fb, productService, categoryService, dialogRef, snackBar) {\n      this.dialogData = dialogData;\n      this.fb = fb;\n      this.productService = productService;\n      this.categoryService = categoryService;\n      this.dialogRef = dialogRef;\n      this.snackBar = snackBar;\n      this.onAddCategory = new EventEmitter();\n      this.onEditCategory = new EventEmitter();\n      this.productForm = FormGroup;\n      this.dialogAction = 'Add';\n      this.action = 'Add';\n      this.categories = [];\n    }\n    ngOnInit() {\n      this.productForm = this.fb.group({\n        name: [null, [Validators.required, Validators.pattern(GlobalConstants.nameRegex)]],\n        categoryId: [null, [Validators.required]],\n        price: [null, [Validators.required]],\n        imageURL: [null],\n        description: [null, [Validators.required]]\n      });\n      if (this.dialogData.action === 'Edit') {\n        this.dialogAction = 'Edit';\n        this.action = 'Update';\n        this.productForm.patchValue(this.dialogData.data);\n      }\n      this.getCategories();\n    }\n    getCategories() {\n      this.categoryService.getCategories().subscribe(resp => {\n        this.categories = resp.data;\n      }, error => {\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n        this.snackBar.openSnackBar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n    handleSubmit() {\n      if (this.dialogAction === 'Edit') {\n        this.edit();\n      } else if (this.dialogAction === 'Add') {\n        this.add();\n      }\n    }\n    add() {\n      let formData = this.productForm.value;\n      let data = {\n        name: formData.name,\n        categoryID: formData.categoryId,\n        price: formData.price,\n        description: formData.description,\n        imageURL: formData.imageURL\n      };\n      this.productService.add(data).subscribe(resp => {\n        this.dialogRef.close();\n        this.onAddCategory.emit();\n        this.responseMessage = resp.message;\n        this.snackBar.openSnackBar(this.responseMessage, 'success');\n      }, error => {\n        this.dialogRef.close();\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n        this.snackBar.openSnackBar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n    edit() {\n      let formData = this.productForm.value;\n      let data = {\n        id: this.dialogData.data.id,\n        name: formData.name,\n        categoryID: formData.categoryId,\n        price: formData.price,\n        description: formData.description,\n        imageURL: formData.imageURL\n      };\n      this.productService.update(data).subscribe(resp => {\n        this.dialogRef.close();\n        this.onEditCategory.emit();\n        this.responseMessage = resp.message;\n        this.snackBar.openSnackBar(this.responseMessage, 'success');\n      }, error => {\n        this.dialogRef.close();\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n        this.snackBar.openSnackBar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n    delete() {}\n    static #_ = this.ɵfac = function ProductComponent_Factory(t) {\n      return new (t || ProductComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ProductService), i0.ɵɵdirectiveInject(i3.CategoryService), i0.ɵɵdirectiveInject(i4.MatDialogRef), i0.ɵɵdirectiveInject(i5.SnackbarService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ProductComponent,\n      selectors: [[\"app-product\"]],\n      decls: 18,\n      vars: 5,\n      consts: [[\"color\", \"primary\"], [\"fxLayout\", \"row\"], [1, \"title-center\"], [1, \"mat-typography\"], [3, \"formGroup\"], [\"fxFlex\", \"\", \"fxLayout\", \"column\"], [\"fxLayout\", \"row wrap\"], [\"appearance\", \"fill\"], [\"type\", \"text\", \"matInput\", \"\", \"formControlName\", \"name\", \"required\", \"\"], [4, \"ngIf\"], [\"align\", \"center\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"mat-dialog-close\", \"\"]],\n      template: function ProductComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"mat-toolbar\", 0)(1, \"mat-toolbar-row\", 1)(2, \"span\", 2);\n          i0.ɵɵtext(3);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(4, \"mat-dialog-content\", 3)(5, \"form\", 4)(6, \"div\", 5)(7, \"div\", 6)(8, \"mat-form-field\", 7)(9, \"mat-label\");\n          i0.ɵɵtext(10, \"\\u09A8\\u09BE\\u09AE (Name)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(11, \"input\", 8);\n          i0.ɵɵtemplate(12, ProductComponent_mat_error_12_Template, 2, 0, \"mat-error\", 9);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(13, \"mat-dialog-actions\", 10)(14, \"button\", 11);\n          i0.ɵɵlistener(\"click\", function ProductComponent_Template_button_click_14_listener() {\n            return ctx.handleSubmit();\n          });\n          i0.ɵɵtext(15);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"button\", 12);\n          i0.ɵɵtext(17, \"Close\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\"\", ctx.dialogData.action, \" \\u09A4\\u09BE\\u09B2\\u09BF\\u0995\\u09BE \\u09B8\\u09AE\\u09C2\\u09B9\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.productForm);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.productForm.controls.name.touched && ctx.productForm.controls.name.errors.pattern);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !(ctx.productForm.valid && ctx.productForm.dirty));\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate1(\" \", ctx.action, \" \");\n        }\n      },\n      dependencies: [i6.NgIf, i7.MatButton, i4.MatDialogClose, i4.MatDialogContent, i4.MatDialogActions, i8.MatFormField, i8.MatLabel, i8.MatError, i9.MatInput, i10.MatToolbar, i10.MatToolbarRow, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i11.DefaultLayoutDirective, i11.DefaultFlexDirective]\n    });\n  }\n  return ProductComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}